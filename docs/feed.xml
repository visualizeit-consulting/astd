<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://visualizeit-consulting.github.io/astd/feed.xml" rel="self" type="application/atom+xml" /><link href="https://visualizeit-consulting.github.io/astd/" rel="alternate" type="text/html" /><updated>2020-10-05T17:21:47-04:00</updated><id>https://visualizeit-consulting.github.io/astd/feed.xml</id><title type="html">Always Stuff to Do</title><subtitle>The adventures of a software developer leading a team discovering the power of Domain Driven Design coupled with Event Sourced Microservices.</subtitle><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><entry><title type="html">Coming up for air</title><link href="https://visualizeit-consulting.github.io/astd/team/coming-up-for-air/" rel="alternate" type="text/html" title="Coming up for air" /><published>2020-10-05T09:30:30-04:00</published><updated>2020-10-05T09:30:30-04:00</updated><id>https://visualizeit-consulting.github.io/astd/team/coming-up-for-air</id><content type="html" xml:base="https://visualizeit-consulting.github.io/astd/team/coming-up-for-air/">&lt;p&gt;I’ve been wanting to start a blog for the last 5 years, but there has always been stuff to do, that at the time, seemed more important. I finally feel like I’m coming up for air after spending the last 5 years transitioning an organization from developing monolithic applications to cloud ready event-driven microservice applications.&lt;/p&gt;

&lt;p&gt;Through a series of posts, I will detail how we transformed our development practices, what we did right, and what we could have done better. 
It didn’t happen overnight and it wasn’t easy, but in the end some of the things to talk about include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Challenges moving off of ClearCase and onto Git&lt;/li&gt;
  &lt;li&gt;Planning releases using story mapping&lt;/li&gt;
  &lt;li&gt;Real benefits of using Domain Driven Design (DDD)&lt;/li&gt;
  &lt;li&gt;Adopting Test Driven Development&lt;/li&gt;
  &lt;li&gt;Increased productivity using CQRS+ES&lt;/li&gt;
  &lt;li&gt;Changing the culture to DevOps&lt;/li&gt;
  &lt;li&gt;Laughing evilly every time the CI/CD system deploys changes with no downtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of this may seem strange since in 2020 containers, microservices, and cloud deployments are old news, but this journey started in 2015 and a lot of 
things were discovered along the way. I constantly lament that even though I’ve come this far there is always stuff to do. And it’s time to get started.&lt;/p&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="Lessons Learned" /><summary type="html">I’ve been wanting to start a blog for the last 5 years, but there has always been stuff to do, that at the time, seemed more important. I finally feel like I’m coming up for air after spending the last 5 years transitioning an organization from developing monolithic applications to cloud ready event-driven microservice applications. Through a series of posts, I will detail how we transformed our development practices, what we did right, and what we could have done better. It didn’t happen overnight and it wasn’t easy, but in the end some of the things to talk about include: Challenges moving off of ClearCase and onto Git Planning releases using story mapping Real benefits of using Domain Driven Design (DDD) Adopting Test Driven Development Increased productivity using CQRS+ES Changing the culture to DevOps Laughing evilly every time the CI/CD system deploys changes with no downtime A lot of this may seem strange since in 2020 containers, microservices, and cloud deployments are old news, but this journey started in 2015 and a lot of things were discovered along the way. I constantly lament that even though I’ve come this far there is always stuff to do. And it’s time to get started.</summary></entry><entry><title type="html">Downtime’s no fun - Time to build</title><link href="https://visualizeit-consulting.github.io/astd/microservices/downtimes-no-fun/" rel="alternate" type="text/html" title="Downtime's no fun - Time to build" /><published>2020-10-05T00:00:00-04:00</published><updated>2020-10-05T00:00:00-04:00</updated><id>https://visualizeit-consulting.github.io/astd/microservices/downtimes-no-fun</id><content type="html" xml:base="https://visualizeit-consulting.github.io/astd/microservices/downtimes-no-fun/">&lt;p&gt;So here we are in October 2020. On September 30th I finished transitioning my latest project to another team and I am having some down time before starting a new job. I’m not used to down time, so I’m going to fill it by building something and trying out some new ideas.&lt;/p&gt;

&lt;p&gt;In the last couple of years I fell in love with CQRS+ES and Kubernetes as a way to build and manage microservices. I used the Axon Framework by AxonIQ for its Event Sourcing and it’s adherence to Domain Driven Design. I used the JHipster Framework as a way to get the infrastructure and libraries needed for robust microservices.&lt;/p&gt;

&lt;p&gt;I don’t have a real reference implementation to fall back on and since I started this journey in 2017, things have already changed. So I plan to work through building an event-driven microservice application with CQRS+ES architecture. I’m going to deploy it first to an on-prem kubernetes cluster and then to either AWS or GCP (maybe both). I’m a java developer so this will be in Java, but I hope along the way to push into Kotlin (still the JVM I know) and learn some GoLang and some different front ends.&lt;/p&gt;

&lt;p&gt;I also plan to follow some sane design procedures and talk through the process of thinking through and building an event-driven and event-sourced system. It’s not the typical way to build an application, but its a much better one. So as I go along I’m going to take time to write about the concepts and the pitfalls I and my previous team encountered. Should be fun!&lt;/p&gt;

&lt;p&gt;The first hurdle though is: What am I going to build? I’ve got some thoughts on that and will elaborate in the next post.&lt;/p&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="CQRS" /><category term="Kubernetes" /><category term="AxonIQ" /><summary type="html">So here we are in October 2020. On September 30th I finished transitioning my latest project to another team and I am having some down time before starting a new job. I’m not used to down time, so I’m going to fill it by building something and trying out some new ideas. In the last couple of years I fell in love with CQRS+ES and Kubernetes as a way to build and manage microservices. I used the Axon Framework by AxonIQ for its Event Sourcing and it’s adherence to Domain Driven Design. I used the JHipster Framework as a way to get the infrastructure and libraries needed for robust microservices. I don’t have a real reference implementation to fall back on and since I started this journey in 2017, things have already changed. So I plan to work through building an event-driven microservice application with CQRS+ES architecture. I’m going to deploy it first to an on-prem kubernetes cluster and then to either AWS or GCP (maybe both). I’m a java developer so this will be in Java, but I hope along the way to push into Kotlin (still the JVM I know) and learn some GoLang and some different front ends. I also plan to follow some sane design procedures and talk through the process of thinking through and building an event-driven and event-sourced system. It’s not the typical way to build an application, but its a much better one. So as I go along I’m going to take time to write about the concepts and the pitfalls I and my previous team encountered. Should be fun! The first hurdle though is: What am I going to build? I’ve got some thoughts on that and will elaborate in the next post.</summary></entry></feed>