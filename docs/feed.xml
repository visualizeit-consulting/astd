<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="https://visualizeit-consulting.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://visualizeit-consulting.com/" rel="alternate" type="text/html" /><updated>2020-10-23T09:27:00-04:00</updated><id>https://visualizeit-consulting.com/feed.xml</id><title type="html">Always Stuff to Do</title><subtitle>The adventures of a software developer leading a team discovering the power of Domain Driven Design coupled with Event Sourced Microservices.</subtitle><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><entry><title type="html">Event Storming to Find the Domain</title><link href="https://visualizeit-consulting.com/ddd/event-storming-to-find-domain/" rel="alternate" type="text/html" title="Event Storming to Find the Domain" /><published>2020-10-20T09:30:30-04:00</published><updated>2020-10-20T09:30:30-04:00</updated><id>https://visualizeit-consulting.com/ddd/event-storming-to-find-domain</id><content type="html" xml:base="https://visualizeit-consulting.com/ddd/event-storming-to-find-domain/">&lt;p&gt;Previously we constructed a story map of our job board application and
now we are going to use event storming to discover our commands and
bounded contexts.&lt;/p&gt;

&lt;h2 id=&quot;what-is-event-storming&quot;&gt;What is Event Storming&lt;/h2&gt;
&lt;p&gt;If you are unfamiliar with it, event storming is a collaborative workshop
process for discussing user stories and finding domain events. You generally
work with a small group of domain experts and focus on what happens as users
interact with the application. Events are captured in domain terms and the
collaborative nature of the workshop builds a shared understanding of the domain
and what needs to be built.&lt;/p&gt;

&lt;p&gt;Since I’m still a team of one I’m not running a workshop. I’m going to do my
best to simulate the process and walk through the steps of event storming and
the follow on activities.&lt;/p&gt;

&lt;h2 id=&quot;the-story-map&quot;&gt;The Story Map&lt;/h2&gt;
&lt;p&gt;In the previous post on &lt;a href=&quot;/microservices/story-mapping-the-job-board/&quot;&gt;story mapping&lt;/a&gt;
we discussed taking the user journey and building a story map. We ended that post
by firing a tracer bullet through a set of stories that provided value and created
the backbone for the entire application. Here is what it looked like:&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;/assets/images/journey/story-map-phase3.png&quot;&gt;&lt;img src=&quot;/assets/images/journey/story-map-phase3.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The Story Map w/Tracer Bullet&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;clear-the-map&quot;&gt;Clear the Map&lt;/h2&gt;
&lt;p&gt;Everything below the stories identified by the tracer bullet is possible future work.
I’m going to clear them off along with our tracer bullet so we can focus on our
stories.&lt;/p&gt;
&lt;figure&gt;
    &lt;a href=&quot;/assets/images/event-storming/event-storming-phase1.png&quot;&gt;&lt;img src=&quot;/assets/images/event-storming/event-storming-phase1.png&quot; /&gt;&lt;/a&gt;
    &lt;figcaption&gt;The map is cleared&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Why do I clear the map?&lt;/strong&gt; Because I don’t want to think about the future work.
&lt;strong&gt;Isn’t the future work important to think about?&lt;/strong&gt; Yes and No. Hopefully,through
collaboration, everyone on the team has an understanding of where things are headed,
but I have found that if you leave everything on the map during event storming the
team will begin to try to squeeze in things that may (or may not) come later. This
can lead to over engineering and delays. What you should be focused on is providing
value as quickly as possible to the customer.&lt;/p&gt;

&lt;h2 id=&quot;identify-the-command-and-query-stories&quot;&gt;Identify the Command and Query Stories&lt;/h2&gt;
&lt;p&gt;Now that we have our tracer bullet stories in isolation we should recognize that there
are two kinds of stories.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Stories that change the system (Command)&lt;/li&gt;
  &lt;li&gt;Stories that query the system (Query)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Command stories change the system and produce &lt;strong&gt;domain events&lt;/strong&gt;.
Query stories view the state of the system in different ways.
By having these two types of stories, we are following the
pattern of Command and Query Responsibility Segregation (CQRS). If you
find a user sub-task story that seems to do both (change the system while viewing its state),
you should analyze it and break it down into two or more Command and Query stories.
Going back to the story map, I’ve put a red circle around the Command stories and blue circles
around the Query stories.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase2.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase2.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Identified the Command and Query stories&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;storm-the-events&quot;&gt;Storm the Events&lt;/h2&gt;
&lt;p&gt;Now comes the fun part. We get to think about the Command stories and what kind
of events would be produced by each story. Some things to keep in mind.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Collaborate - This is a team effort&lt;/li&gt;
  &lt;li&gt;Use words from the domain&lt;/li&gt;
  &lt;li&gt;Events are things that happen&lt;strong&gt;ed&lt;/strong&gt;, so use the past tense.&lt;/li&gt;
  &lt;li&gt;More than 1 event can be produced.&lt;/li&gt;
  &lt;li&gt;The same event can be produced by two separate stories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I worked through the story map and decided on the following events:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;User Registered&lt;/li&gt;
  &lt;li&gt;User Logged In&lt;/li&gt;
  &lt;li&gt;Job Posted&lt;/li&gt;
  &lt;li&gt;Application Started&lt;/li&gt;
  &lt;li&gt;Work Experience Added&lt;/li&gt;
  &lt;li&gt;Resume Attached&lt;/li&gt;
  &lt;li&gt;Application Completed&lt;/li&gt;
  &lt;li&gt;Applicant Contacted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we can see that the words of the domain are starting to emerge.
I chose to use the word Applicant for the person applying to a job. I
thought about using the term Job Seeker, but stuck with words that were
more closely tied to the action of applying. Application Started and
Completed came out of some brain storming. The applicant should be
able to add multiple work experiences and attach a resume and change
their mind and attache a different resume and then complete the
application. I think the logical thing would be to have an event that
signifies the start of the process. Going back to the story map
I placed the events under their respective stories:&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase3.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase3.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Events are added to the map&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;work-backwards-to-commands&quot;&gt;Work Backwards to Commands&lt;/h2&gt;
&lt;p&gt;We have the events, so now we need to figure out what commands trigger
the events. Starting with the event, we think about what command would
logically create it. Some things to remember when doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Commands do not have to follow the same name as the event.&lt;/li&gt;
  &lt;li&gt;Commands are in the present tense&lt;/li&gt;
  &lt;li&gt;Different commands may produce the same event&lt;/li&gt;
  &lt;li&gt;Not all Commands are from a user or through user interaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the commands I came up with:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Register User&lt;/li&gt;
  &lt;li&gt;Log In&lt;/li&gt;
  &lt;li&gt;Apply to Job&lt;/li&gt;
  &lt;li&gt;Enter Work Experience&lt;/li&gt;
  &lt;li&gt;Attach Resume&lt;/li&gt;
  &lt;li&gt;Complete Application&lt;/li&gt;
  &lt;li&gt;Contact Applicant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In practice, I like to put the events on a white board next to the command(s) that
generate them.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase4.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase4.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Commands next to their events&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;identify-the-bounded-contexts&quot;&gt;Identify the Bounded Contexts&lt;/h2&gt;
&lt;p&gt;Now that the commands and events have been identified they can be grouped together
into cohesive sets. For example, the registration and login command and events can
be grouped together as they are directly related to the user. The commands and
events pertaining to applying for a job can be grouped together leaving the ones
associated with posting a new job together by themselves. Grouping them together
this way helps to identify the bounded contexts. The bounded contexts can then be
given names from the domain.&lt;/p&gt;

&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase5.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase5.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Identifying the Bounded Contexts&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;We have found our events, commands, and identified
our bounded contexts. But what about those other stories? The query ones? Is there
anything we can do with those?&lt;/p&gt;

&lt;h2 id=&quot;examine-the-query-stories&quot;&gt;Examine the Query Stories&lt;/h2&gt;
&lt;p&gt;The query stories describe the views or how users see the system. In our system
these views will be built from the events. We now know the events, so lets take
another look at these stories.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase6.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase6.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;The Query Stories&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;determine-the-query-building-events&quot;&gt;Determine the Query Building Events&lt;/h2&gt;
&lt;p&gt;Not all the events will be used to populate the query views. We can start by
trying to determine which events will contain the data required by the views.
I took a shot at this and came up with:&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase7.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase7.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;Assigning events to the query stories&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Unfortunately we still don’t have any idea of what kind of data will be needed
by the views. In turn that means we don’t know what kind of data will need to
be supplied by the events. How do we solve this?&lt;/p&gt;

&lt;h2 id=&quot;ux-helps-identify-the-data&quot;&gt;UX Helps Identify the Data&lt;/h2&gt;
&lt;p&gt;An effective way of solving the problem is to use wireframes of the user
interface. I don’t have a UX expert working on this (which I highly
recommend) but I can make some reasonable guesses. By putting the wireframes
in order over the stories it becomes easier to see how a user will interact
with the application and what kind of data they will need.&lt;/p&gt;
&lt;figure&gt;
  &lt;a href=&quot;/assets/images/event-storming/event-storming-phase8.png&quot;&gt;
  &lt;img src=&quot;/assets/images/event-storming/event-storming-phase8.png&quot; /&gt;
  &lt;/a&gt;
  &lt;figcaption&gt;UX wireframes help us find the data&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Now it becomes easy to see the kind of data the events need to provide which in
turn dictates the kind of data the commands need to contain. Next up we will
dig further into this when we discover our aggregates and design our events.&lt;/p&gt;

&lt;h2 id=&quot;references-and-tools&quot;&gt;References and Tools&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html#.VbhQTn-9KK1&quot;&gt;Introducing Event Storming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://techbeacon.com/devops/introduction-event-storming-easy-way-achieve-domain-driven-design&quot;&gt;How to Use Event Storming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="Event Storming" /><category term="Story Mapping" /><summary type="html">Previously we constructed a story map of our job board application and now we are going to use event storming to discover our commands and bounded contexts. What is Event Storming If you are unfamiliar with it, event storming is a collaborative workshop process for discussing user stories and finding domain events. You generally work with a small group of domain experts and focus on what happens as users interact with the application. Events are captured in domain terms and the collaborative nature of the workshop builds a shared understanding of the domain and what needs to be built. Since I’m still a team of one I’m not running a workshop. I’m going to do my best to simulate the process and walk through the steps of event storming and the follow on activities. The Story Map In the previous post on story mapping we discussed taking the user journey and building a story map. We ended that post by firing a tracer bullet through a set of stories that provided value and created the backbone for the entire application. Here is what it looked like: The Story Map w/Tracer Bullet Clear the Map Everything below the stories identified by the tracer bullet is possible future work. I’m going to clear them off along with our tracer bullet so we can focus on our stories. The map is cleared Why do I clear the map? Because I don’t want to think about the future work. Isn’t the future work important to think about? Yes and No. Hopefully,through collaboration, everyone on the team has an understanding of where things are headed, but I have found that if you leave everything on the map during event storming the team will begin to try to squeeze in things that may (or may not) come later. This can lead to over engineering and delays. What you should be focused on is providing value as quickly as possible to the customer. Identify the Command and Query Stories Now that we have our tracer bullet stories in isolation we should recognize that there are two kinds of stories. Stories that change the system (Command) Stories that query the system (Query) Command stories change the system and produce domain events. Query stories view the state of the system in different ways. By having these two types of stories, we are following the pattern of Command and Query Responsibility Segregation (CQRS). If you find a user sub-task story that seems to do both (change the system while viewing its state), you should analyze it and break it down into two or more Command and Query stories. Going back to the story map, I’ve put a red circle around the Command stories and blue circles around the Query stories. Identified the Command and Query stories Storm the Events Now comes the fun part. We get to think about the Command stories and what kind of events would be produced by each story. Some things to keep in mind. Collaborate - This is a team effort Use words from the domain Events are things that happened, so use the past tense. More than 1 event can be produced. The same event can be produced by two separate stories I worked through the story map and decided on the following events: User Registered User Logged In Job Posted Application Started Work Experience Added Resume Attached Application Completed Applicant Contacted So we can see that the words of the domain are starting to emerge. I chose to use the word Applicant for the person applying to a job. I thought about using the term Job Seeker, but stuck with words that were more closely tied to the action of applying. Application Started and Completed came out of some brain storming. The applicant should be able to add multiple work experiences and attach a resume and change their mind and attache a different resume and then complete the application. I think the logical thing would be to have an event that signifies the start of the process. Going back to the story map I placed the events under their respective stories: Events are added to the map Work Backwards to Commands We have the events, so now we need to figure out what commands trigger the events. Starting with the event, we think about what command would logically create it. Some things to remember when doing this: Commands do not have to follow the same name as the event. Commands are in the present tense Different commands may produce the same event Not all Commands are from a user or through user interaction Here are the commands I came up with: Register User Log In Apply to Job Enter Work Experience Attach Resume Complete Application Contact Applicant In practice, I like to put the events on a white board next to the command(s) that generate them. Commands next to their events Identify the Bounded Contexts Now that the commands and events have been identified they can be grouped together into cohesive sets. For example, the registration and login command and events can be grouped together as they are directly related to the user. The commands and events pertaining to applying for a job can be grouped together leaving the ones associated with posting a new job together by themselves. Grouping them together this way helps to identify the bounded contexts. The bounded contexts can then be given names from the domain. Identifying the Bounded Contexts We have found our events, commands, and identified our bounded contexts. But what about those other stories? The query ones? Is there anything we can do with those? Examine the Query Stories The query stories describe the views or how users see the system. In our system these views will be built from the events. We now know the events, so lets take another look at these stories. The Query Stories Determine the Query Building Events Not all the events will be used to populate the query views. We can start by trying to determine which events will contain the data required by the views. I took a shot at this and came up with: Assigning events to the query stories Unfortunately we still don’t have any idea of what kind of data will be needed by the views. In turn that means we don’t know what kind of data will need to be supplied by the events. How do we solve this? UX Helps Identify the Data An effective way of solving the problem is to use wireframes of the user interface. I don’t have a UX expert working on this (which I highly recommend) but I can make some reasonable guesses. By putting the wireframes in order over the stories it becomes easier to see how a user will interact with the application and what kind of data they will need. UX wireframes help us find the data Now it becomes easy to see the kind of data the events need to provide which in turn dictates the kind of data the commands need to contain. Next up we will dig further into this when we discover our aggregates and design our events. References and Tools Introducing Event Storming How to Use Event Storming</summary></entry><entry><title type="html">Story Mapping the Job Board</title><link href="https://visualizeit-consulting.com/microservices/story-mapping-the-job-board/" rel="alternate" type="text/html" title="Story Mapping the Job Board" /><published>2020-10-09T09:30:30-04:00</published><updated>2020-10-09T09:30:30-04:00</updated><id>https://visualizeit-consulting.com/microservices/story-mapping-the-job-board</id><content type="html" xml:base="https://visualizeit-consulting.com/microservices/story-mapping-the-job-board/">&lt;p&gt;Now that the detour is over, we can focus on creating a story map for the job
board. Story mapping has been around for years, but I am still surprised by the
number of people I work with who have never heard of it. So let’s recap.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-story-map&quot;&gt;What is a Story Map&lt;/h2&gt;
&lt;p&gt;A story map is a collaborative planning tool that allows you to break down user
stories in a two dimensional format. Jeff Patton came up with the technique to
help those living in backlog hell. It’s an easy concept to grasp, you place
stories in a line from left to right to capture linear flow through your
application (or system). Big stories that are too big to get done in a sprint go
at the top and are the &lt;strong&gt;User Activities&lt;/strong&gt;. Below this line of big stories are
smaller stories that break down the User Activities into &lt;strong&gt;User Tasks&lt;/strong&gt;. Then
underneath the User Tasks are &lt;strong&gt;Sub-Tasks&lt;/strong&gt;. The sub-tasks become the stories
that you implement and are estimated by the team.&lt;/p&gt;

&lt;h2 id=&quot;why-do-a-story-map&quot;&gt;Why do a Story Map?&lt;/h2&gt;
&lt;p&gt;It gives you visibility into the work that needs to be done. It allows you to
“fire a tracer bullet” through the work you are planning. That tracer bullet
lets you figure out what would provide the most value in the shortest amount of
time. Drawing horizontal lines through the map you can group the sub-tasks into
planned releases or sprints.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;This stuff works:&lt;/strong&gt; In April of 2018 my team was given a new project. The
requirements were based on new laws being enacted by the State’s Legislature and
the laws mandated that the citizenry would be able fulfill legal obligations
on-line starting January 1, 2019. So we had a hard deadline and a new business
domain the team knew nothing about. I introduced the idea of building a
story map and we walked through the requirements with the analysts and the
client. We peppered a wall with different colored sticky notes and after a lot
of work had a nearly complete story map covering two walls of a conference room.
After doing this, we realized there was no way we would be done on time. Working
together with blue masking tape, we divided and grouped the sub-tasks until we
identified what absolutely had to be there on day 1 (our MVP) and what could
follow in subsequent releases. Working together created a shared understanding,
got buy-in from all the stakeholders, and we successfully released the application
at the end of December 2018.&lt;/p&gt;

&lt;h2 id=&quot;building-the-story-map&quot;&gt;Building the Story Map&lt;/h2&gt;
&lt;p&gt;So to build out the map let’s review the
&lt;a href=&quot;/microservices/detour-to-personas-and-journeys/&quot;&gt;user journeys&lt;/a&gt; and
try to find some common themes or groupings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/ken-journey-grouped.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/ken-journey-grouped.png 480w,            /assets/images/resized/800/ken-journey-grouped.png 800w,            /assets/images/resized/1400/ken-journey-grouped.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/sarah-journey-grouped.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/sarah-journey-grouped.png 480w,            /assets/images/resized/800/sarah-journey-grouped.png 800w,            /assets/images/resized/1400/sarah-journey-grouped.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now if we take those groupings we can revise the user journeys:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/revised-user-journey.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/revised-user-journey.png 480w,            /assets/images/resized/800/revised-user-journey.png 800w,            /assets/images/resized/1400/revised-user-journey.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice how they both have a Join activity they will need to perform, but it’s
happening at different times. There is nothing to constrain Ken from joining the
job board when he is ready to apply, but Sarah needs to join before she does
anything. To make things easier let’s change Ken’s Journey to align with Sarah’s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/aligned-user-journey.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/aligned-user-journey.png 480w,            /assets/images/resized/800/aligned-user-journey.png 800w,            /assets/images/resized/1400/aligned-user-journey.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s better! The blue sticky notes of the journey represent the User
Activities of our story map. The items that were grouped together are a
good starting point for the User Tasks. Let’s see how it looks:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/story-map-phase1.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/story-map-phase1.png 480w,            /assets/images/resized/800/story-map-phase1.png 800w,            /assets/images/resized/1400/story-map-phase1.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is looking good so far. We have a reasonable linear flow through the
application and we’ve identified who is doing what and when. Is this perfect? No.
Ken could login and register after he has already found a job to apply to, but
&lt;strong&gt;it is&lt;/strong&gt; reasonable. You will find that when story mapping there are times when some
activities can be performed by different users at different times or other
issues. That’s when the team needs to have conversations and discuss the stories
and come to a &lt;strong&gt;shared understanding&lt;/strong&gt;. Under each of the User Tasks we can
define the User Sub-Tasks. The sub-tasks are those things the user can do to
complete the User Task.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/story-map-phase2.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/story-map-phase2.png 480w,            /assets/images/resized/800/story-map-phase2.png 800w,            /assets/images/resized/1400/story-map-phase2.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now the sub-tasks are added under their respective user tasks. I should note
that the sub-tasks, in fact tasks and activities as well, can be written more formally as
stories using &lt;em&gt;As a [type of user], I want [an action] so that [a value]&lt;/em&gt;. It’s
pretty simple and I really like writing stories in this notation. So why didn’t
I? First, trying to show formal user stories on all the
sticky notes in my diagram would make it hard to read. Second, in real life
my team found out the same thing. We did start out trying to put all that information
on a sticky note before sticking it to the wall. It slowed us down and we had to
stand closer to the wall in order to read it. It was better to quickly get the
activities, tasks, and sub-tasks down and organized by the user so we could
&lt;em&gt;talk&lt;/em&gt; about the stories. If something didn’t make sense, we just threw it away
and wrote a new one. Pretty simple. Now that we have our story map taking shape
how do we decide what to work on first?&lt;/p&gt;

&lt;h2 id=&quot;firing-a-tracer-bullet&quot;&gt;Firing a Tracer Bullet&lt;/h2&gt;
&lt;p&gt;I find the best way to get started is to “fire a tracer bullet” through the
system. It is a technique to identify the end-to-end path that quickly provides
value. It’s not the same as an MVP or even a release. It allows the team to build
the skeleton of the application and then start hanging things from it. This approach
helps mitigate risk. If a problem is encountered with the architecture it’s
discovered early making it easier to pivot. Implementing the tracer bullet path
may take multiple sprints, but I’ve found it is the quickest way to early success.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/story-map-phase3.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/story-map-phase3.png 480w,            /assets/images/resized/800/story-map-phase3.png 800w,            /assets/images/resized/1400/story-map-phase3.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok no surprise that the tracer bullet covers the top line of the sub-tasks, but
I did pull down some sub-tasks that I think are not essential in finding the
skeleton of our app. I also moved the “Open Resume” sub-task up beside “Review
applicant work experience”. I think it’s important to figure out early on how to
upload and open files. I actually thought just leaving “Open Resume” because the
resume should have all the details that the Hiring Manager needs to make a
decision.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Tip from the Trench:&lt;/strong&gt; I’m not kidding about providing value as fast as possible.
About a year ago I was asked to give my opinion on another state agency’s
modernization project. They were thinking of hiring a large consulting firm to do
the work. This firm was all about moving the project to the cloud. I sat in a
presentation going over the planned work. It was all about the tooling the cloud
provider uh.. provided. There was weeks of work just to get the developers working
in the cloud. Nowhere was there mention of what business value existed at the end
of 3 months of work. A colleague of mine pointed that out and the firm was not hired.
Even when trying new technology you must always provide value that the business can see.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Usually at this point, the team would look at the tracer bullet stories and start
estimating them and begin sprint planning. Since I’m a team of one
I’m going to move forward with event storming and maybe some event modeling.&lt;/p&gt;

&lt;h2 id=&quot;references-and-tools&quot;&gt;References and Tools&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jpattonassociates.com/the-new-backlog/&quot;&gt;The New Backlog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mountaingoatsoftware.com/agile/user-stories&quot;&gt;User Stories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.stormotion.io/blog/how-to-write-a-good-user-story-with-examples-templates/&quot;&gt;How to Write a Good User Story: with Examples &amp;amp; Templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://builtin.com/software-engineering-perspectives/what-are-tracer-bullets&quot;&gt;Tracer Bullets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="Story Mapping" /><summary type="html">Now that the detour is over, we can focus on creating a story map for the job board. Story mapping has been around for years, but I am still surprised by the number of people I work with who have never heard of it. So let’s recap. What is a Story Map A story map is a collaborative planning tool that allows you to break down user stories in a two dimensional format. Jeff Patton came up with the technique to help those living in backlog hell. It’s an easy concept to grasp, you place stories in a line from left to right to capture linear flow through your application (or system). Big stories that are too big to get done in a sprint go at the top and are the User Activities. Below this line of big stories are smaller stories that break down the User Activities into User Tasks. Then underneath the User Tasks are Sub-Tasks. The sub-tasks become the stories that you implement and are estimated by the team. Why do a Story Map? It gives you visibility into the work that needs to be done. It allows you to “fire a tracer bullet” through the work you are planning. That tracer bullet lets you figure out what would provide the most value in the shortest amount of time. Drawing horizontal lines through the map you can group the sub-tasks into planned releases or sprints. This stuff works: In April of 2018 my team was given a new project. The requirements were based on new laws being enacted by the State’s Legislature and the laws mandated that the citizenry would be able fulfill legal obligations on-line starting January 1, 2019. So we had a hard deadline and a new business domain the team knew nothing about. I introduced the idea of building a story map and we walked through the requirements with the analysts and the client. We peppered a wall with different colored sticky notes and after a lot of work had a nearly complete story map covering two walls of a conference room. After doing this, we realized there was no way we would be done on time. Working together with blue masking tape, we divided and grouped the sub-tasks until we identified what absolutely had to be there on day 1 (our MVP) and what could follow in subsequent releases. Working together created a shared understanding, got buy-in from all the stakeholders, and we successfully released the application at the end of December 2018. Building the Story Map So to build out the map let’s review the user journeys and try to find some common themes or groupings. Now if we take those groupings we can revise the user journeys: Notice how they both have a Join activity they will need to perform, but it’s happening at different times. There is nothing to constrain Ken from joining the job board when he is ready to apply, but Sarah needs to join before she does anything. To make things easier let’s change Ken’s Journey to align with Sarah’s. That’s better! The blue sticky notes of the journey represent the User Activities of our story map. The items that were grouped together are a good starting point for the User Tasks. Let’s see how it looks: This is looking good so far. We have a reasonable linear flow through the application and we’ve identified who is doing what and when. Is this perfect? No. Ken could login and register after he has already found a job to apply to, but it is reasonable. You will find that when story mapping there are times when some activities can be performed by different users at different times or other issues. That’s when the team needs to have conversations and discuss the stories and come to a shared understanding. Under each of the User Tasks we can define the User Sub-Tasks. The sub-tasks are those things the user can do to complete the User Task. Now the sub-tasks are added under their respective user tasks. I should note that the sub-tasks, in fact tasks and activities as well, can be written more formally as stories using As a [type of user], I want [an action] so that [a value]. It’s pretty simple and I really like writing stories in this notation. So why didn’t I? First, trying to show formal user stories on all the sticky notes in my diagram would make it hard to read. Second, in real life my team found out the same thing. We did start out trying to put all that information on a sticky note before sticking it to the wall. It slowed us down and we had to stand closer to the wall in order to read it. It was better to quickly get the activities, tasks, and sub-tasks down and organized by the user so we could talk about the stories. If something didn’t make sense, we just threw it away and wrote a new one. Pretty simple. Now that we have our story map taking shape how do we decide what to work on first? Firing a Tracer Bullet I find the best way to get started is to “fire a tracer bullet” through the system. It is a technique to identify the end-to-end path that quickly provides value. It’s not the same as an MVP or even a release. It allows the team to build the skeleton of the application and then start hanging things from it. This approach helps mitigate risk. If a problem is encountered with the architecture it’s discovered early making it easier to pivot. Implementing the tracer bullet path may take multiple sprints, but I’ve found it is the quickest way to early success. Ok no surprise that the tracer bullet covers the top line of the sub-tasks, but I did pull down some sub-tasks that I think are not essential in finding the skeleton of our app. I also moved the “Open Resume” sub-task up beside “Review applicant work experience”. I think it’s important to figure out early on how to upload and open files. I actually thought just leaving “Open Resume” because the resume should have all the details that the Hiring Manager needs to make a decision. Tip from the Trench: I’m not kidding about providing value as fast as possible. About a year ago I was asked to give my opinion on another state agency’s modernization project. They were thinking of hiring a large consulting firm to do the work. This firm was all about moving the project to the cloud. I sat in a presentation going over the planned work. It was all about the tooling the cloud provider uh.. provided. There was weeks of work just to get the developers working in the cloud. Nowhere was there mention of what business value existed at the end of 3 months of work. A colleague of mine pointed that out and the firm was not hired. Even when trying new technology you must always provide value that the business can see. Next Steps Usually at this point, the team would look at the tracer bullet stories and start estimating them and begin sprint planning. Since I’m a team of one I’m going to move forward with event storming and maybe some event modeling. References and Tools The New Backlog User Stories How to Write a Good User Story: with Examples &amp;amp; Templates Tracer Bullets</summary></entry><entry><title type="html">A Detour to Personas and Journeys</title><link href="https://visualizeit-consulting.com/microservices/detour-to-personas-and-journeys/" rel="alternate" type="text/html" title="A Detour to Personas and Journeys" /><published>2020-10-08T09:45:30-04:00</published><updated>2020-10-08T09:45:30-04:00</updated><id>https://visualizeit-consulting.com/microservices/detour-to-personas-and-journeys</id><content type="html" xml:base="https://visualizeit-consulting.com/microservices/detour-to-personas-and-journeys/">&lt;p&gt;So I might have gotten a little ahead of myself. I meant this post to be about story mapping the job board application. When I sat down to do that, I realized I left off a couple of other steps that should/could to be done prior to creating a Story Map.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Determining who are our users&lt;/li&gt;
  &lt;li&gt;Creating a user journey&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;guidance-from-ux-design&quot;&gt;Guidance from UX Design&lt;/h2&gt;
&lt;p&gt;These are both concepts I learned on my last project. I had the pleasure of working with a UX developer and started reading more about UX design. One of the ideas I found really helpful was creating &lt;a href=&quot;https://medium.muz.li/what-are-how-to-create-personas-step-by-step-guidelines-of-everything-49357da2cb59&quot;&gt;personas&lt;/a&gt; to flesh out potential users. Then you use the personas to help craft that user’s journey through your application. Once you have enough journeys you examine them and determine the larger activities and tasks that these users may do as they interact with your application.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;User vs. Customer&lt;/strong&gt; When working on this post I became confused because there is so much information on creating User Journeys and on creating Customer Journeys. I am going to use the word &lt;em&gt;user&lt;/em&gt; in this case because I’m not asking anyone to spend money. This job board is &lt;strong&gt;free&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;crafting-some-personas&quot;&gt;Crafting Some Personas&lt;/h2&gt;
&lt;p&gt;Creating great personas is a discipline onto itself and generally requires teamwork and help from marketing or business analysts. You should gather
data and demographics and try to put yourself in other people’s shoes. You then create persona cards that can have everything from biographical info, goals, social media accounts and basically anything else you can think of to make them more real.&lt;/p&gt;

&lt;p&gt;Being a team of one and trying to keep things simple, I’ve created two personas: Ken, our job seeker, and Sarah a hiring manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/user-persona-cards.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/user-persona-cards.png 480w,            /assets/images/resized/800/user-persona-cards.png 800w,            /assets/images/resized/1400/user-persona-cards.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t go into a lot of details on their background or personalities, but I think it’s enough to help drive out what the job board needs to do.&lt;/p&gt;

&lt;h2 id=&quot;mapping-a-users-journey&quot;&gt;Mapping a User’s Journey&lt;/h2&gt;
&lt;p&gt;Now that we have some personas, we can map out their respective journeys. Again, there is a lot to do here in order to do it right. I found several different examples on how to map a journey. Several involve mapping the user not only using an application, but what they are doing and feeling before and after using it. I really like this idea because it focuses on &lt;strong&gt;outcomes&lt;/strong&gt; for the user and those outcomes generally happen in the real world. However, I kept it simple again and just focused on the journey through the job board. These journeys are not very complex and are too simple for a real world job board, but I think they will serve my purpose for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/ken-journey.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/ken-journey.png 480w,            /assets/images/resized/800/ken-journey.png 800w,            /assets/images/resized/1400/ken-journey.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/journey/sarah-journey.png&quot; alt=&quot;&quot; srcset=&quot;            /assets/images/resized/480/sarah-journey.png 480w,            /assets/images/resized/800/sarah-journey.png 800w,            /assets/images/resized/1400/sarah-journey.png 1400w,    &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ken’s journey starts with seeing a list of job postings that he can search. If he finds one that’s interesting he can view the complete post and choose to apply. Only then does he need to login (and register if it’s his first time).&lt;/p&gt;

&lt;p&gt;Sarah’s journey starts at the same place, but she needs to login before doing anything useful (from her person’s perspective). Once logged in she can post new jobs or manage existing ones. She can also see who has been applying and recruit them.&lt;/p&gt;

&lt;p&gt;Now with these personas and user journeys maybe its time to start flushing out some stories.&lt;/p&gt;

&lt;h2 id=&quot;references-and-tools&quot;&gt;References and Tools&lt;/h2&gt;
&lt;p&gt;These are some links I referenced when learning more about Personas and Journeys.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qubstudio.com/blog/how-to-create-ux-personas/&quot;&gt;How to Create a UX Persona&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://uxmentor.me/personas-the-beginners-guide/&quot;&gt;Personas - The Beginner’s Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.myagilepartner.com/blog/index.php/2018/08/19/story-mapping/&quot;&gt;Story Mapping and Customer Journey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These links are the tools I used to bring things together&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://avatarmaker.com/&quot;&gt;AvatarMaker&lt;/a&gt; - I just kept hitting random until Ken and Sarah appeared.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.namegenerator.biz&quot;&gt;Name Generator&lt;/a&gt; - In a similar vein I just kept generating names until I found ones that fit.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt; - For SVG editing&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://app.lucidchart.com&quot;&gt;LucidChart&lt;/a&gt; - For laying out the cards and the journeys.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="Story Mapping" /><category term="UX" /><summary type="html">So I might have gotten a little ahead of myself. I meant this post to be about story mapping the job board application. When I sat down to do that, I realized I left off a couple of other steps that should/could to be done prior to creating a Story Map. Determining who are our users Creating a user journey Guidance from UX Design These are both concepts I learned on my last project. I had the pleasure of working with a UX developer and started reading more about UX design. One of the ideas I found really helpful was creating personas to flesh out potential users. Then you use the personas to help craft that user’s journey through your application. Once you have enough journeys you examine them and determine the larger activities and tasks that these users may do as they interact with your application. User vs. Customer When working on this post I became confused because there is so much information on creating User Journeys and on creating Customer Journeys. I am going to use the word user in this case because I’m not asking anyone to spend money. This job board is free. Crafting Some Personas Creating great personas is a discipline onto itself and generally requires teamwork and help from marketing or business analysts. You should gather data and demographics and try to put yourself in other people’s shoes. You then create persona cards that can have everything from biographical info, goals, social media accounts and basically anything else you can think of to make them more real. Being a team of one and trying to keep things simple, I’ve created two personas: Ken, our job seeker, and Sarah a hiring manager. I didn’t go into a lot of details on their background or personalities, but I think it’s enough to help drive out what the job board needs to do. Mapping a User’s Journey Now that we have some personas, we can map out their respective journeys. Again, there is a lot to do here in order to do it right. I found several different examples on how to map a journey. Several involve mapping the user not only using an application, but what they are doing and feeling before and after using it. I really like this idea because it focuses on outcomes for the user and those outcomes generally happen in the real world. However, I kept it simple again and just focused on the journey through the job board. These journeys are not very complex and are too simple for a real world job board, but I think they will serve my purpose for now. Ken’s journey starts with seeing a list of job postings that he can search. If he finds one that’s interesting he can view the complete post and choose to apply. Only then does he need to login (and register if it’s his first time). Sarah’s journey starts at the same place, but she needs to login before doing anything useful (from her person’s perspective). Once logged in she can post new jobs or manage existing ones. She can also see who has been applying and recruit them. Now with these personas and user journeys maybe its time to start flushing out some stories. References and Tools These are some links I referenced when learning more about Personas and Journeys. How to Create a UX Persona Personas - The Beginner’s Guide Story Mapping and Customer Journey These links are the tools I used to bring things together AvatarMaker - I just kept hitting random until Ken and Sarah appeared. Name Generator - In a similar vein I just kept generating names until I found ones that fit. Inkscape - For SVG editing LucidChart - For laying out the cards and the journeys.</summary></entry><entry><title type="html">The CQRS+ES Job Application Tracker</title><link href="https://visualizeit-consulting.com/microservices/job-req-application/" rel="alternate" type="text/html" title="The CQRS+ES Job Application Tracker" /><published>2020-10-06T11:37:30-04:00</published><updated>2020-10-06T11:37:30-04:00</updated><id>https://visualizeit-consulting.com/microservices/job-req-application</id><content type="html" xml:base="https://visualizeit-consulting.com/microservices/job-req-application/">&lt;p&gt;In my recent search for a new job, I’ve had the pleasure of interacting with some different job search sites. I’ve been frustrated at a couple of them, one in particular, that sent me a rejection a few minutes after I saved my application as a draft (I did not submit). The rejection included phrases like “After careful consideration..” which of course was a lie. The next day I received another rejection email for the same job application that I never finished. I know that the chances are high that the site is just poorly designed and implemented and it got me thinking about how a site like this works and maybe I could write my own.&lt;/p&gt;

&lt;p&gt;I think this would be a reasonable project to demonstrate the benefits of event-driven microservices with CQRS+ES because I think it’s an easy to understand Domain and can have some useful features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Registering users&lt;/li&gt;
  &lt;li&gt;Logging in with different roles (job seeker, job poster)&lt;/li&gt;
  &lt;li&gt;Uploading documents (e.g. resumes or cover letters)&lt;/li&gt;
  &lt;li&gt;Saving a draft to complete later&lt;/li&gt;
  &lt;li&gt;Notifications and tracking changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a lot to do in order to get this done, particularly since I’m a team of one. My roadmap consists of the following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Flesh out the requirements using Story Mapping and Event Storming/Modeling&lt;/li&gt;
  &lt;li&gt;Determine a Most Viable Product from the Story Map&lt;/li&gt;
  &lt;li&gt;Determine and design the bounded contexts&lt;/li&gt;
  &lt;li&gt;Begin implementing the microservices&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In addition to those steps, I will also be planning out and creating some infrastructure for the deployment. In the beginning I’m going to need to do the
following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup on-prem Kubernetes cluster&lt;/li&gt;
  &lt;li&gt;Setup CI/CD infrastructure and pipelines&lt;/li&gt;
  &lt;li&gt;Create Docker Compose scripts for running containers locally before before deployment to Kubernetes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Next Up: Story Mapping&lt;/em&gt;&lt;/p&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="Requirements" /><category term="Event Sourcing" /><category term="Kubernetes" /><category term="DDD" /><summary type="html">In my recent search for a new job, I’ve had the pleasure of interacting with some different job search sites. I’ve been frustrated at a couple of them, one in particular, that sent me a rejection a few minutes after I saved my application as a draft (I did not submit). The rejection included phrases like “After careful consideration..” which of course was a lie. The next day I received another rejection email for the same job application that I never finished. I know that the chances are high that the site is just poorly designed and implemented and it got me thinking about how a site like this works and maybe I could write my own. I think this would be a reasonable project to demonstrate the benefits of event-driven microservices with CQRS+ES because I think it’s an easy to understand Domain and can have some useful features: Registering users Logging in with different roles (job seeker, job poster) Uploading documents (e.g. resumes or cover letters) Saving a draft to complete later Notifications and tracking changes There is a lot to do in order to get this done, particularly since I’m a team of one. My roadmap consists of the following steps: Flesh out the requirements using Story Mapping and Event Storming/Modeling Determine a Most Viable Product from the Story Map Determine and design the bounded contexts Begin implementing the microservices In addition to those steps, I will also be planning out and creating some infrastructure for the deployment. In the beginning I’m going to need to do the following: Setup on-prem Kubernetes cluster Setup CI/CD infrastructure and pipelines Create Docker Compose scripts for running containers locally before before deployment to Kubernetes. Next Up: Story Mapping</summary></entry><entry><title type="html">Downtime’s no fun - Time to build</title><link href="https://visualizeit-consulting.com/microservices/downtimes-no-fun/" rel="alternate" type="text/html" title="Downtime's no fun - Time to build" /><published>2020-10-05T11:30:30-04:00</published><updated>2020-10-05T11:30:30-04:00</updated><id>https://visualizeit-consulting.com/microservices/downtimes-no-fun</id><content type="html" xml:base="https://visualizeit-consulting.com/microservices/downtimes-no-fun/">&lt;p&gt;So here we are in October 2020. On September 30th I finished transitioning my latest project to another team and I am having some down time before starting a new job. I’m not used to down time, so I’m going to fill it by building something and trying out some new ideas.&lt;/p&gt;

&lt;p&gt;In the last couple of years I fell in love with CQRS+ES and Kubernetes as a way to build and manage microservices. I used the Axon Framework by AxonIQ for its Event Sourcing and it’s adherence to Domain Driven Design. I used the JHipster Framework as a way to get the infrastructure and libraries needed for robust microservices.&lt;/p&gt;

&lt;p&gt;I don’t have a real reference implementation to fall back on and since I started this journey in 2017, things have already changed. So I plan to work through building an event-driven microservice application with CQRS+ES architecture. I’m going to deploy it first to an on-prem kubernetes cluster and then to either AWS or GCP (maybe both). I’m a java developer so this will be in Java, but I hope along the way to push into Kotlin (still the JVM I know) and learn some GoLang and some different front ends.&lt;/p&gt;

&lt;p&gt;I also plan to follow some sane design procedures and talk through the process of thinking through and building an event-driven and event-sourced system. It’s not the typical way to build an application, but its a much better one. So as I go along I’m going to take time to write about the concepts and the pitfalls I and my previous team encountered. Should be fun!&lt;/p&gt;

&lt;p&gt;The first hurdle though is: What am I going to build? I’ve got some thoughts on that and will elaborate in the next post.&lt;/p&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="CQRS" /><category term="Kubernetes" /><category term="AxonIQ" /><summary type="html">So here we are in October 2020. On September 30th I finished transitioning my latest project to another team and I am having some down time before starting a new job. I’m not used to down time, so I’m going to fill it by building something and trying out some new ideas. In the last couple of years I fell in love with CQRS+ES and Kubernetes as a way to build and manage microservices. I used the Axon Framework by AxonIQ for its Event Sourcing and it’s adherence to Domain Driven Design. I used the JHipster Framework as a way to get the infrastructure and libraries needed for robust microservices. I don’t have a real reference implementation to fall back on and since I started this journey in 2017, things have already changed. So I plan to work through building an event-driven microservice application with CQRS+ES architecture. I’m going to deploy it first to an on-prem kubernetes cluster and then to either AWS or GCP (maybe both). I’m a java developer so this will be in Java, but I hope along the way to push into Kotlin (still the JVM I know) and learn some GoLang and some different front ends. I also plan to follow some sane design procedures and talk through the process of thinking through and building an event-driven and event-sourced system. It’s not the typical way to build an application, but its a much better one. So as I go along I’m going to take time to write about the concepts and the pitfalls I and my previous team encountered. Should be fun! The first hurdle though is: What am I going to build? I’ve got some thoughts on that and will elaborate in the next post.</summary></entry><entry><title type="html">Coming up for air</title><link href="https://visualizeit-consulting.com/team/coming-up-for-air/" rel="alternate" type="text/html" title="Coming up for air" /><published>2020-10-05T09:30:30-04:00</published><updated>2020-10-05T09:30:30-04:00</updated><id>https://visualizeit-consulting.com/team/coming-up-for-air</id><content type="html" xml:base="https://visualizeit-consulting.com/team/coming-up-for-air/">&lt;p&gt;I’ve been wanting to start a blog for the last 5 years, but there has always been stuff to do, that at the time, seemed more important. I finally feel like I’m coming up for air after spending the last 5 years transitioning an organization from developing monolithic applications to cloud ready event-driven microservice applications.&lt;/p&gt;

&lt;p&gt;Through a series of posts, I will detail how we transformed our development practices, what we did right, and what we could have done better. 
It didn’t happen overnight and it wasn’t easy, but in the end some of the things to talk about include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Challenges moving off of ClearCase and onto Git&lt;/li&gt;
  &lt;li&gt;Planning releases using story mapping&lt;/li&gt;
  &lt;li&gt;Real benefits of using Domain Driven Design (DDD)&lt;/li&gt;
  &lt;li&gt;Adopting Test Driven Development&lt;/li&gt;
  &lt;li&gt;Increased productivity using CQRS+ES&lt;/li&gt;
  &lt;li&gt;Changing the culture to DevOps&lt;/li&gt;
  &lt;li&gt;Laughing evilly every time the CI/CD system deploys changes with no downtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A lot of this may seem strange since in 2020 containers, microservices, and cloud deployments are old news, but this journey started in 2015 and a lot of 
things were discovered along the way. I constantly lament that even though I’ve come this far there is always stuff to do. And it’s time to get started.&lt;/p&gt;</content><author><name>Andy Whitaker</name><email>astd@visualizeit-consulting.com</email></author><category term="Lessons Learned" /><summary type="html">I’ve been wanting to start a blog for the last 5 years, but there has always been stuff to do, that at the time, seemed more important. I finally feel like I’m coming up for air after spending the last 5 years transitioning an organization from developing monolithic applications to cloud ready event-driven microservice applications. Through a series of posts, I will detail how we transformed our development practices, what we did right, and what we could have done better. It didn’t happen overnight and it wasn’t easy, but in the end some of the things to talk about include: Challenges moving off of ClearCase and onto Git Planning releases using story mapping Real benefits of using Domain Driven Design (DDD) Adopting Test Driven Development Increased productivity using CQRS+ES Changing the culture to DevOps Laughing evilly every time the CI/CD system deploys changes with no downtime A lot of this may seem strange since in 2020 containers, microservices, and cloud deployments are old news, but this journey started in 2015 and a lot of things were discovered along the way. I constantly lament that even though I’ve come this far there is always stuff to do. And it’s time to get started.</summary></entry></feed>